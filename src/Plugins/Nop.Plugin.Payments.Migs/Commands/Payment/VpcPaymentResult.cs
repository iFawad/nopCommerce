using Elsheimy.Components.ePayment.Migs.Converters;
using Elsheimy.Components.ePayment.Migs.Web;

namespace Elsheimy.Components.ePayment.Migs.Commands
{
  public class VpcPaymentResult : VpcCommandResult
  {
    #region AVS
    [QueryParam(Name = "vpc_AVSRequestCode")]
    public string AVSRequestCode { get; set; }

    [QueryParam(Name = "vpc_AVSResultCode")]
    public string AVSResultCode { get; set; }
    public IValueConverter AVSResultCodeConverter { get; set; }
    public string AVSResultDescription { get { return AVSResultCodeConverter.Convert(AVSResultCode); } }
    #endregion

    #region ACQ
    [QueryParam(Name = "vpc_AcqAVSRespCode")]
    public string AcqAVSRespCode { get; set; }

    [QueryParam(Name = "vpc_AcqCSCRespCode")]
    public string AcqCSCRespCode { get; set; }

    [QueryParam(Name = "vpc_AcqResponseCode")]
    public string AcqResponseCode { get; set; }
    #endregion

    /// <summary>
    /// The amount of transaction in the smallest currency unit. e.g. if the transaction amount is $49.95 then the amount in cents is 4995.
    /// </summary>
    #region Amount
    [QueryParam(Name = "vpc_Amount")]
    public int Amount { get; set; }
    /// <summary>
    /// The actual amount of transaction.
    /// </summary>
    public decimal ActualAmount { get { return (decimal)Amount / 100.0M; } }
    #endregion

    #region CSC
    /// <summary>
    /// Indicates the Card Security Code level used to match the data held by the cardholder issuing bank.
    /// </summary>
    [QueryParam(Name = "vpc_CSCResultCode")]
    public string CSCResultCode { get; set; }
    public IValueConverter CSCResultCodeConverter { get; set; }

    public string CSCResultMessage { get { return CSCResultCodeConverter.Convert(CSCResultCode); } }
    #endregion

    #region Card
    /// <summary>
    /// The card code.
    /// </summary>
    [QueryParam(Name = "vpc_Card")]
    public string Card { get; set; }
    public string CardType
    {
      get
      {
        if (null != CardCodeConverter)
          return CardCodeConverter[Card];
        else
          return null;
      }
    }
    public IValueConverter CardCodeConverter { get; set; }
    #endregion

    #region Risk
    [QueryParam(Name = "vpc_RiskOverallResult")]
    public string RiskOverallResult { get; set; }
    #endregion


    #region Transaction
    /// <summary>
    /// A code issued by the acquiring bank to approve or deny the transaction. This may not be always be supplied by all acquirers.
    /// </summary>
    [QueryParam(Name = "vpc_AuthorizeId")]
    public string AuthorizeId { get; set; }
    /// <summary>
    /// A date supplied by an acquirer to indicate when this transaction will be settled.
    /// </summary>
    [QueryParam(Name = "vpc_BatchNo")]
    public string BatchNo { get; set; }
    /// <summary>
    /// Merchant unique transaction type.
    /// </summary>
    [QueryParam(Name = "vpc_MerchTxnRef")]
    public string MerchantTxnReference { get; set; }

    /// <summary>
    /// Merchant order info.
    /// </summary>
    [QueryParam(Name = "vpc_OrderInfo")]
    public string OrderInfo { get; set; }
    /// <summary>
    /// Also known as Reference Retrieval Number (RRN), which is a unique identifier.
    /// </summary>
    [QueryParam(Name = "vpc_ReceiptNo")]
    public string ReceiptNo { get; set; }
    /// <summary>
    /// A unique number generated by the VPC for the transaction.
    /// </summary>
    [QueryParam(Name = "vpc_TransactionNo")]
    public string TransactionNo { get; set; }
    /// <summary>
    /// A response code that is generated by the payment server to indicate the status of the transaction. A value of '0' indicates a successful transaction.
    /// </summary>
    [QueryParam(Name = "vpc_TxnResponseCode")]
    public string TxnResponseCode { get; set; }
    public virtual string TxnResponseSuccessCode { get { return "0"; } }
    public bool IsApproved { get { return TxnResponseCode == TxnResponseSuccessCode; } }
    public IValueConverter ResponseCodeConverter { get; set; }
    public string TxnResponseMessage { get { return ResponseCodeConverter.Convert(TxnResponseCode); } }
    #endregion

    #region Other
    /// <summary>
    /// A message to indicate an error the transaction encountered.
    /// </summary>
    [QueryParam(Name = "vpc_Message")]
    public string Message { get; set; }
    #endregion


    public VpcPaymentResult()
    {
      this.AVSResultCodeConverter = new VpcAVSConverter();
      this.CSCResultCodeConverter = new VpcCSCConverter();
      this.CardCodeConverter = new VpcCardConverter();
      this.ResponseCodeConverter = new VpcResponseConverter();
    }

  }
}
